/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.Slobish;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Franco
 */
public class ConfigurateWristband extends javax.swing.JFrame {
    
        DriverSQL SQL;
        ResultSet resultado;
    /**
     * Creates new form ConfigurateWristband
     */
    public ConfigurateWristband(DriverSQL SQL) {
        this.SQL=SQL;
        initComponents();
        fillData();
    }
    public ConfigurateWristband()
    {
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        PatientTable = new javax.swing.JTable();
        TextField = new javax.swing.JTextField();
        UpdateButton = new javax.swing.JButton();
        SelectBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(850, 350));

        PatientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DNI", "Name", "Lastname", "Age", "Height", "Weight", "Bloodtype", "Medical Insurance", "Medical Number", "Assig. Wristband", "E-mail", "IDmed", "User", "Password"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(PatientTable);

        TextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldActionPerformed(evt);
            }
        });

        UpdateButton.setText("Update");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        SelectBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DNI", "Name", "Lastname", "Age", "Height", "Weight", "IDmed", "Bloodtype", "Medical Insurance", "Medical Number", "Email", "Assign. Wristband", "User", "Password" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(SelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(UpdateButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 932, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UpdateButton)
                    .addComponent(SelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void fillData()
    {
        String QUERY="SELECT pacientes.* , parientes.*,pulseras.* from parientes inner join pulseras on "
                + "parientes.DNI =pulseras.Paciente inner join pacientes on parientes.DNI=pacientes.DNI "
                + "WHERE pacientes.IDmed LIKE '"+GlobalSession.username+"'";
        
        ArrayList<String> onDesk;
        onDesk = new ArrayList<String>();      
        DefaultTableModel model = (DefaultTableModel) PatientTable.getModel();
        try
        {
        resultado=SQL.ejecutarSQLSelect(QUERY);
        while (resultado.next())
        {
        onDesk.add(0,resultado.getString("DNI"));             
        onDesk.add(1,resultado.getString("Nombre"));            
        onDesk.add(2,resultado.getString("Apellido"));
        onDesk.add(3,resultado.getString("Edad"));
        onDesk.add(4,resultado.getString("Altura"));           
        onDesk.add(5,resultado.getString("Peso"));
        onDesk.add(6,resultado.getString("GrupoSanguineo"));             
        onDesk.add(7,resultado.getString("ObraSocial"));           
        onDesk.add(8,resultado.getString("NroObraSocial"));           
        onDesk.add(9,resultado.getString("Patente"));
        onDesk.add(10,resultado.getString("Email"));
        onDesk.add(11,resultado.getString("IDmed"));
        onDesk.add(12,resultado.getString("Usuario"));
        onDesk.add(13,resultado.getString("Contrase√±a"));
        model.addRow(new Object[]{onDesk.get(0),onDesk.get(1), onDesk.get(2),onDesk.get(3),onDesk.get(4),onDesk.get(5),onDesk.get(6),onDesk.get(7),onDesk.get(8),onDesk.get(9),onDesk.get(10),onDesk.get(11),onDesk.get(12),onDesk.get(13)});
        }
        
        }
        catch(SQLException ex) 
        {
            Logger.getLogger(PacientRegister.class.getName()).log(Level.SEVERE, null, ex);
        
        }
    }
    
    private void TextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        String wanted=TextField.getText();
        String EDITABLE;
        String queryPaciente = null;
        String save;
        String Selected = (String)PatientTable.getValueAt(PatientTable.getSelectedRow(),0);
        String Selection= (String) SelectBox.getSelectedItem();
        
        System.out.println(Selected);
        System.out.println(Selection);
        
        switch (Selection)
        {
            case "DNI":
                EDITABLE="DNI";
                queryPaciente= "UPDATE pacientes SET pacientes."+EDITABLE+" = '"+wanted+"' where pacientes.DNI like '"+Selected+"'";
                SQL.ejecutarSQL(queryPaciente);
                queryPaciente= "UPDATE pulseras SET pulseras.paciente = '"+wanted+"' where pulseras.paciente like '"+Selected+"'";
                SQL.ejecutarSQL(queryPaciente);
                queryPaciente= "UPDATE parientes SET parientes."+EDITABLE+" = '"+wanted+"' where parientes.DNI like '"+Selected+"'";
                SQL.ejecutarSQL(queryPaciente);
                break;
            case "Name":
                EDITABLE="Nombre";
                queryPaciente= "UPDATE pacientes SET pacientes."+EDITABLE+" = '"+wanted+"' where pacientes.DNI like '"+Selected+"'";
                SQL.ejecutarSQL(queryPaciente);
                break;
            case "Lastname":
                EDITABLE="Apellido";
                queryPaciente= "UPDATE pacientes SET pacientes."+EDITABLE+" = '"+wanted+"' where pacientes.DNI like '"+Selected+"'";
                SQL.ejecutarSQL(queryPaciente);
                break;
            case "Age":
                EDITABLE="Edad";
                queryPaciente= "UPDATE pacientes SET pacientes."+EDITABLE+" = '"+wanted+"' where pacientes.DNI like '"+Selected+"'";
                SQL.ejecutarSQL(queryPaciente);
                break;
            case "Height":
                EDITABLE="Altura";
                queryPaciente= "UPDATE pacientes SET pacientes."+EDITABLE+" = '"+wanted+"' where pacientes.DNI like '"+Selected+"'";
                SQL.ejecutarSQL(queryPaciente);
                break;
            case "Weight":
                EDITABLE="Peso";
                queryPaciente= "UPDATE pacientes SET pacientes."+EDITABLE+" = '"+wanted+"' where pacientes.DNI like '"+Selected+"'";
                SQL.ejecutarSQL(queryPaciente);
                break;
            case "IDmed":
                EDITABLE="IDmed";
                queryPaciente= "UPDATE pacientes SET pacientes."+EDITABLE+" = '"+wanted+"' where pacientes.DNI like '"+Selected+"'";
                SQL.ejecutarSQL(queryPaciente);
                break;
            case "Email":
                EDITABLE="Email";
                queryPaciente= "UPDATE pacientes SET pacientes."+EDITABLE+" = '"+wanted+"' where pacientes.DNI like '"+Selected+"'";
                SQL.ejecutarSQL(queryPaciente);
                break;
            case "Bloodtype":
                EDITABLE="GrupoSanguineo";
                queryPaciente= "UPDATE pacientes SET "+EDITABLE+" = '"+wanted+"' where DNI like '"+Selected+"'";
                SQL.ejecutarSQL(queryPaciente);
                break;
            case "Medical Insurance":
                EDITABLE="ObraSocial";
                queryPaciente= "UPDATE pacientes SET pacientes."+EDITABLE+" = '"+wanted+"' where pacientes.DNI like '"+Selected+"'";
                SQL.ejecutarSQL(queryPaciente);
                break;
            case "Medical Number":
                EDITABLE="NroObraSocial";
                queryPaciente= "UPDATE pacientes SET pacientes."+EDITABLE+" = '"+wanted+"' where pacientes.DNI like '"+Selected+"'";
                SQL.ejecutarSQL(queryPaciente);
                break;
            case "Assign. Wristband":
                EDITABLE="Patente";
                queryPaciente= "UPDATE pulseras SET pulseras."+EDITABLE+" = '"+wanted+"' where pulseras.DNI like '"+Selected+"'";
                SQL.ejecutarSQL(queryPaciente);
                /**
                EDITABLE="Patente";
                queryPaciente="SELECT pulseras.FechaInicio from pulseras where pulseras.DNI like '"+Selected+"'";
                resultado=SQL.ejecutarSQLSelect(queryPaciente);
                resultado.next();
                save=resultado.getString("FechaInicio");
                queryPaciente= "DELETE pulseras.* from pulseras where pulseras.DNI like '"+Selected+"'";
                SQL.ejecutarSQL(queryPaciente);
                queryPaciente=""
                */
                
                break;
            case "User":
                EDITABLE="Usuario";
                queryPaciente= "UPDATE parientes SET parientes."+EDITABLE+" = '"+wanted+"' where parientes.DNI like '"+Selected+"'";
                SQL.ejecutarSQL(queryPaciente);
                break;
            case "Password":
                EDITABLE="Contrase√±a";
                queryPaciente= "UPDATE parientes SET parientes."+EDITABLE+" = '"+wanted+"' where parientes.DNI like '"+Selected+"'";
                SQL.ejecutarSQL(queryPaciente);
                break;
                
                
        }
        System.out.println(queryPaciente);
        cleanTabla(PatientTable);
        fillData();
    }//GEN-LAST:event_UpdateButtonActionPerformed

    public void cleanTabla(JTable tabla)
    {
        try {
            DefaultTableModel modelo=(DefaultTableModel) tabla.getModel();
            int filas=tabla.getRowCount();
            for (int i = 0;filas>i; i++) {
                modelo.removeRow(0);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al limpiar la tabla.");
        }
    }
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConfigurateWristband.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConfigurateWristband.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConfigurateWristband.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConfigurateWristband.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConfigurateWristband().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable PatientTable;
    private javax.swing.JComboBox<String> SelectBox;
    private javax.swing.JTextField TextField;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
