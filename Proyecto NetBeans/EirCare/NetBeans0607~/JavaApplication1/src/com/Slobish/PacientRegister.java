/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.Slobish;

import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Franco
 */
public final class PacientRegister extends javax.swing.JFrame {
    String CurrentlyDNI;
    DriverSQL SQL;
    GlobalSession GS;
    DefaultTableModel model;
    boolean SearchFieldModified=false;
    boolean alreadyDone=false;
    boolean majorOrder=false;
    /**
     * Creates new form PacientRegister
     * @param SQL
     * @param GS
     */
    public PacientRegister(DriverSQL SQL,GlobalSession GS) {
        
        this.CurrentlyDNI = null;
        this.SQL=SQL;
        this.GS=GS;
        initComponents();
        this.model=(DefaultTableModel) PacientTable.getModel();
        PacientInfo();
        PacientTable.addMouseListener(new MouseAdapter() 
         { 
            @Override
            public void mouseClicked(MouseEvent e) 
                { 
                    if (e.getClickCount() == 2) 
                        { 
                            Point p = e.getPoint(); 
                            int row = PacientTable.rowAtPoint(p); 
                            int column = PacientTable.columnAtPoint(p); 
                            System.out.println(row);
                            placePacientMeasure(row);
                            

                       } 
                }
         });
    }
    
    public PacientRegister()
    {
        this.CurrentlyDNI = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PacientTableContainer = new javax.swing.JScrollPane();
        PacientTable = new javax.swing.JTable();
        MeasureTableContainer = new javax.swing.JScrollPane();
        MeasureTable = new javax.swing.JTable();
        SearchField = new javax.swing.JTextField();
        SearchOptions = new javax.swing.JComboBox<>();
        SearchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(51, 0, 0));

        PacientTable.setBackground(new java.awt.Color(255, 204, 153));
        PacientTable.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        PacientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DNI", "Nombre", "Apellido", "Edad", "Altura", "Peso", "Grupo Sanguineo", "Obra Social", "Nro Obra Social"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PacientTable.setGridColor(new java.awt.Color(51, 0, 0));
        PacientTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        PacientTableContainer.setViewportView(PacientTable);
        if (PacientTable.getColumnModel().getColumnCount() > 0) {
            PacientTable.getColumnModel().getColumn(0).setResizable(false);
            PacientTable.getColumnModel().getColumn(1).setResizable(false);
            PacientTable.getColumnModel().getColumn(2).setResizable(false);
            PacientTable.getColumnModel().getColumn(3).setResizable(false);
            PacientTable.getColumnModel().getColumn(4).setResizable(false);
            PacientTable.getColumnModel().getColumn(5).setResizable(false);
            PacientTable.getColumnModel().getColumn(6).setResizable(false);
            PacientTable.getColumnModel().getColumn(7).setResizable(false);
            PacientTable.getColumnModel().getColumn(8).setResizable(false);
        }

        MeasureTable.setBackground(new java.awt.Color(255, 204, 153));
        MeasureTable.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        MeasureTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Hora", "Parametro", "Valor 1", "Valor 2l", "Descripcion"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        MeasureTable.setGridColor(new java.awt.Color(51, 0, 0));
        MeasureTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        MeasureTableContainer.setViewportView(MeasureTable);
        if (MeasureTable.getColumnModel().getColumnCount() > 0) {
            MeasureTable.getColumnModel().getColumn(0).setResizable(false);
            MeasureTable.getColumnModel().getColumn(1).setResizable(false);
            MeasureTable.getColumnModel().getColumn(2).setResizable(false);
            MeasureTable.getColumnModel().getColumn(3).setResizable(false);
            MeasureTable.getColumnModel().getColumn(4).setResizable(false);
            MeasureTable.getColumnModel().getColumn(5).setResizable(false);
        }

        SearchField.setText("Search by...");
        SearchField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SearchFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                SearchFieldFocusLost(evt);
            }
        });

        SearchOptions.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DNI", "Nombre", "Apellido", "Edad", "GrupoSanguineo", "ObraSocial", "NroObraSocial", "All" }));

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SearchOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SearchButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PacientTableContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 804, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(MeasureTableContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PacientTableContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                    .addComponent(MeasureTableContainer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchButton))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void SearchFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SearchFieldFocusGained
        if (SearchFieldModified==false)
        {
        SearchField.setText("");
        this.SearchFieldModified=true;// TODO add your handling code here:
        }
        else
        {
            if (SearchField.getText().equals("Search by..."))
            {
                SearchField.setText("");
            }
        }
        
    }//GEN-LAST:event_SearchFieldFocusGained

    private void SearchFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SearchFieldFocusLost
            
            if (SearchField.getText().equals(""))
            {
                SearchField.setText("Search by...");
            }        
        
    }//GEN-LAST:event_SearchFieldFocusLost

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
       
        if (SearchOptions.getSelectedItem().equals("All"))
        {
           majorOrder=true;
           cleanTabla(MeasureTable);
           cleanTabla(PacientTable);
           PacientInfo();
           
        }
        else
        {
            if (!SearchField.getText().equals("Search by..."))
            {
            majorOrder=true;
            ArrayList<String> onDesk;
            onDesk = new ArrayList<String>();  
            ResultSet resultado;
            cleanTabla(MeasureTable);
            cleanTabla(PacientTable);
           
            resultado=SQL.ejecutarSQLSelect("SELECT pacientes.* FROM pacientes INNER JOIN medicos on pacientes.IDmed=medicos.IDmed where pacientes."+SearchOptions.getSelectedItem()+"='"+SearchField.getText()+"' AND medicos.IDmed='"+GS.username+"'");
            System.out.println(SearchOptions.getSelectedItem());
                try
                {
                   while(resultado.next())
                    {

                     onDesk.add(0,resultado.getString("DNI"));             
                     onDesk.add(1,resultado.getString("Nombre"));            
                     onDesk.add(2,resultado.getString("Apellido"));
                     onDesk.add(3,resultado.getString("Edad"));
                     onDesk.add(4,resultado.getString("Altura"));           
                     onDesk.add(5,resultado.getString("Peso"));
                     onDesk.add(6,resultado.getString("GrupoSanguineo"));             
                     onDesk.add(7,resultado.getString("ObraSocial"));           
                     onDesk.add(8,resultado.getString("NroObraSocial"));           
                     model.addRow(new Object[]{onDesk.get(0),onDesk.get(1), onDesk.get(2),onDesk.get(3),onDesk.get(4),onDesk.get(5),onDesk.get(6),onDesk.get(7),onDesk.get(8)});            

                    }
                   

                } 
                catch (SQLException ex) 
                {
                    Logger.getLogger(PacientRegister.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
   
    }//GEN-LAST:event_SearchButtonActionPerformed
    public void placePacientMeasure(int row)
    {
        ResultSet resultado;
        String DNI;
        
        ArrayList<String> onDesk = new ArrayList<String>();
        DNI=(String)PacientTable.getValueAt(row, 0);
        if (DNI.equals(CurrentlyDNI))
        {
            alreadyDone=true;
            if(majorOrder==true)
            {
                majorOrder=false;
                alreadyDone=false;
            }
        }
        else 
        {
            cleanTabla(MeasureTable);
            CurrentlyDNI=DNI;
            alreadyDone=false;
        }
        
        if (!alreadyDone)
        {
        DefaultTableModel model = (DefaultTableModel) MeasureTable.getModel();
        try
        {
        resultado=SQL.ejecutarSQLSelect("SELECT mediciones.* FROM mediciones INNER JOIN pacientes ON mediciones.PacienteDNI=pacientes.DNI where DNI LIKE '" +DNI+"'");
        while (resultado.next())
        {
        onDesk.add(0,resultado.getString("Fecha"));
        onDesk.add(1,resultado.getString("Hora"));
        onDesk.add(2,resultado.getString("Parametro"));
        onDesk.add(3,resultado.getString("Valor1"));
        onDesk.add(4,resultado.getString("Valor2"));
        onDesk.add(5,resultado.getString("Descripcion"));
        model.addRow(new Object[]{onDesk.get(0),onDesk.get(1), onDesk.get(2),onDesk.get(3),onDesk.get(4),onDesk.get(5)});
        }
        
        }
        catch(SQLException ex) 
        {
            Logger.getLogger(PacientRegister.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        
}
public void cleanTabla(JTable tabla)
{
        try {
            DefaultTableModel modelo=(DefaultTableModel) tabla.getModel();
            int filas=tabla.getRowCount();
            for (int i = 0;filas>i; i++) {
                modelo.removeRow(0);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al limpiar la tabla.");
        }
}   
    public void PacientInfo()
    {
      ResultSet resultado;
      ArrayList<String> onDesk;
      onDesk = new ArrayList<String>();      
      boolean exist=false;   
      
      resultado=SQL.ejecutarSQLSelect("SELECT pacientes.* from pacientes inner JOIN medicos on pacientes.IDmed = medicos.IDmed WHERE medicos.IDmed like '"+GS.username+"'");
      System.out.println("Consiguiendo informacion de usuario");      
      
      try
        {
           while(resultado.next())
            {
             exist=true;                    
             onDesk.add(0,resultado.getString("DNI"));             
             onDesk.add(1,resultado.getString("Nombre"));            
             onDesk.add(2,resultado.getString("Apellido"));
             onDesk.add(3,resultado.getString("Edad"));
             onDesk.add(4,resultado.getString("Altura"));           
             onDesk.add(5,resultado.getString("Peso"));
             onDesk.add(6,resultado.getString("GrupoSanguineo"));             
             onDesk.add(7,resultado.getString("ObraSocial"));           
             onDesk.add(8,resultado.getString("NroObraSocial"));           
             model.addRow(new Object[]{onDesk.get(0),onDesk.get(1), onDesk.get(2),onDesk.get(3),onDesk.get(4),onDesk.get(5),onDesk.get(6),onDesk.get(7),onDesk.get(8)});            
             
            }
            if (!exist) 
            {
                System.out.println("No hay informacion de pacientes en este usuario");
            }
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(PacientRegister.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PacientRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PacientRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PacientRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PacientRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new PacientRegister().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable MeasureTable;
    private javax.swing.JScrollPane MeasureTableContainer;
    private javax.swing.JTable PacientTable;
    private javax.swing.JScrollPane PacientTableContainer;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTextField SearchField;
    private javax.swing.JComboBox<String> SearchOptions;
    // End of variables declaration//GEN-END:variables
}
