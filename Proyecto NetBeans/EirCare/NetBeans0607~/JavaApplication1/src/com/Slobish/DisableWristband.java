/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.Slobish;

import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Franco
 */
public class DisableWristband extends javax.swing.JFrame {
    DriverSQL SQL;
    ResultSet resultado;
    
    /**
     * Creates new form UnableWristband
     * @param SQL
     */
    public DisableWristband(DriverSQL SQL) 
    {
        this.SQL=SQL;
        initComponents();
        fillData();
        
        /**PatientTable.addMouseListener(new MouseAdapter() 
         { 
            @Override
            public void mouseClicked(MouseEvent e) 
                { 
                    if (e.getClickCount() == 2) 
                        { 
                            Point p = e.getPoint(); 
                            int row = PatientTable.rowAtPoint(p); 
                            int column = PatientTable.columnAtPoint(p); 
                            
                            
                        } 
                }
           });
        
        */
    }
    public DisableWristband() 
    {
                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        PatientTable = new javax.swing.JTable();
        SearchButton = new javax.swing.JButton();
        SearchField = new javax.swing.JTextField();
        Selection = new javax.swing.JComboBox<>();
        DisableButton = new javax.swing.JButton();
        PasswordField = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        PatientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DNI", "Patent"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(PatientTable);

        SearchButton.setForeground(new java.awt.Color(251, 148, 68));
        SearchButton.setText("Search");
        SearchButton.setBorder(null);
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        Selection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DNI", "Patent" }));

        DisableButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DisableButton.setForeground(new java.awt.Color(204, 153, 0));
        DisableButton.setText("Disable");
        DisableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisableButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Selection, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(SearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(DisableButton, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                    .addComponent(PasswordField))
                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(DisableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(91, 91, 91)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Selection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                        .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        ArrayList<String> onDesk;
        onDesk = new ArrayList<String>();      
        DefaultTableModel model = (DefaultTableModel) PatientTable.getModel();
        char [] pass = PasswordField.getPassword();
        String password = new String(pass);
        if(password.equals(""))
        {
            cleanTabla(PatientTable);
            
            try
            {
                resultado=SQL.ejecutarSQLSelect("SELECT pacientes.* FROM pacientes where IDmed LIKE '" +GlobalSession.username+"' "
                        + "and "+Selection.getSelectedItem()+" like '"+SearchField.getText()+"'");
                while (resultado.next())
                {
                    onDesk.add(0,resultado.getString("DNI"));
                    onDesk.add(1,resultado.getString("Patente"));
                    
                    model.addRow(new Object[]{onDesk.get(0),onDesk.get(1)});
                }
                
            }
            catch(SQLException ex)
            {
                Logger.getLogger(PacientRegister.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_SearchButtonActionPerformed

    private void DisableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisableButtonActionPerformed
        Calendar c = Calendar.getInstance();
        String dia = Integer.toString(c.get(Calendar.DATE));
        String mes = Integer.toString(c.get(Calendar.MONTH));
        String año = Integer.toString(c.get(Calendar.YEAR));

        char[] pass = PasswordField.getPassword();
        String Password= new String(pass);
        String Selected;
        Selected=(String)PatientTable.getValueAt(PatientTable.getSelectedRow(),0);
        String QUERY1="SELECT medicos.* from medicos where medicos.contraseña LIKE '"+Password+"' and medicos.IDmed "
                + "LIKE '"+GlobalSession.username+"'";
        String QUERY2="UPDATE pulseras" + "SET FechaFinal = '" +dia+"/"+mes+"/"+año+"'"+
                        "WHERE pulseras.paciente LIKE '"+Selected+"'";
        String QUERY3="DELETE pacientes.* from pacientes where pacientes.DNI "
                + "LIKE '"+Selected+"'";
        String QUERY4="DELETE parientes.* from parientes where parientes.DNI LIKE'"+Selected+"'";
        
        System.out.println(QUERY1+"      "+Selected);
        System.out.println(QUERY3);
        
        resultado=SQL.ejecutarSQLSelect(QUERY1);
        try {
            if (resultado.next())
            {
                resultado=SQL.ejecutarSQLSelect("SELECT DNI from pacientes where DNI LIKE '"+Selected+"'");
                if(resultado.next())
                {
                    try
                    {
                      SQL.ejecutarSQL(QUERY3);
                      SQL.ejecutarSQL(QUERY4);
                      SQL.ejecutarSQL(QUERY2);
        
                      JOptionPane.showMessageDialog(null, "The patient has been succesfully disabled!");       
                      cleanTabla(PatientTable);
                      fillData();
                    }
                    catch(HeadlessException e)
                            {
                                System.out.println(e);
                                JOptionPane.showMessageDialog(null, "Error trying to remove patient!");       
                            }
                
                
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Couldn't find the patient!");       
                }    
            }
            else
            {
             JOptionPane.showMessageDialog(null, "Password doesn't match!");   
            }
        } catch (SQLException ex) {
            Logger.getLogger(DisableWristband.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error 501\n(DB connection failed)");
        }
        
        
    }//GEN-LAST:event_DisableButtonActionPerformed

    /**
     */
    public void fillData()
    {
        
        ArrayList<String> onDesk;
        onDesk = new ArrayList<String>();      
        DefaultTableModel model = (DefaultTableModel) PatientTable.getModel();
        try
        {
        resultado=SQL.ejecutarSQLSelect("SELECT pulseras.patente,pacientes.dni "
                + "from pulseras inner join pacientes on pacientes.dni=pulseras.paciente "
                + "where pacientes.IDmed like '" +GlobalSession.username+"'");
        while (resultado.next())
        {
        onDesk.add(0,resultado.getString("DNI"));
        onDesk.add(1,resultado.getString("Patente"));
        
        model.addRow(new Object[]{onDesk.get(0),onDesk.get(1)});
        }
        
        }
        catch(SQLException ex) 
        {
            Logger.getLogger(PacientRegister.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
   
    public void cleanTabla(JTable tabla)
    {
        try {
            DefaultTableModel modelo=(DefaultTableModel) tabla.getModel();
            int filas=tabla.getRowCount();
            for (int i = 0;filas>i; i++) {
                modelo.removeRow(0);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al limpiar la tabla.");
        }
    }  
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DisableWristband.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DisableWristband.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DisableWristband.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DisableWristband.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DisableWristband().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DisableButton;
    private javax.swing.JPasswordField PasswordField;
    private javax.swing.JTable PatientTable;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTextField SearchField;
    private javax.swing.JComboBox<String> Selection;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
