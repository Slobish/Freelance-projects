/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.Slobish;


import java.awt.Color;
import java.awt.Font;
import java.awt.HeadlessException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.HashMap;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import java.util.Properties;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
/**
 *
 * @author Franco
 */
public class SetNewWristband1 extends javax.swing.JFrame {
    
    Session session;
    MimeMessage message;
    String emailFrom;
    String emailHost;
    String emailTo;
    String passFrom;
    String SexSelected;  
    String generatedPassword;
    String generatedUser;
    
    Icon ImageSelected;
    DriverSQL SQL;
    Color nativeColor;
    HashMap Information;
    boolean allFilled=false;
    /**
     * Creates new form ConfigurateFrame
     * @param SQL
     */
    public SetNewWristband1(DriverSQL SQL) {
        this.SQL=SQL;
        initComponents();
        emailFrom="eircaresite";
        passFrom="rivuscuchimicemanufandi123";
        emailHost="smtp.gmail.com";
        emailTo=null;
        
        Uploading.setVisible(false);        
        NameX.setVisible(false);
        LastnameX.setVisible(false);
        DNIX.setVisible(false);
        AddressX.setVisible(false);
        NumberX.setVisible(false);
        AgeX.setVisible(false);
        HeightX.setVisible(false);
        WeightX.setVisible(false);
        EmailX.setVisible(false);
        AssignedWristbandX.setVisible(false);
        
        LOGO.requestFocus();
        SexSelected="none";
        nativeColor = new Color(102, 102, 102);
        Information = new HashMap();
        
        }
    public SetNewWristband1()
    {
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PatientLastField = new javax.swing.JTextField();
        PatientNameField = new javax.swing.JTextField();
        PatientWeightField = new javax.swing.JTextField();
        PatientHeightField = new javax.swing.JTextField();
        PatientAgeField = new javax.swing.JTextField();
        PatientNumberField = new javax.swing.JTextField();
        PatientAddressField = new javax.swing.JTextField();
        Hombre = new javax.swing.JButton();
        Mujer = new javax.swing.JButton();
        LOGO = new javax.swing.JLabel();
        PatientDNIField = new javax.swing.JTextField();
        PatientMedicalInsurance = new javax.swing.JComboBox<>();
        Next = new javax.swing.JButton();
        PatientBloodtype = new javax.swing.JComboBox<>();
        NameX = new javax.swing.JLabel();
        HeightX = new javax.swing.JLabel();
        DNIX = new javax.swing.JLabel();
        AddressX = new javax.swing.JLabel();
        LastnameX = new javax.swing.JLabel();
        WeightX = new javax.swing.JLabel();
        NumberX = new javax.swing.JLabel();
        AgeX = new javax.swing.JLabel();
        AssignedWristbandKey = new javax.swing.JTextField();
        AssignedWristbandX = new javax.swing.JLabel();
        PatientEmailField = new javax.swing.JTextField();
        EmailX = new javax.swing.JLabel();
        Uploading = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        PatientLastField.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        PatientLastField.setForeground(new java.awt.Color(102, 102, 102));
        PatientLastField.setText("Lastname...");
        PatientLastField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PatientLastFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                PatientLastFieldFocusLost(evt);
            }
        });

        PatientNameField.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        PatientNameField.setForeground(new java.awt.Color(102, 102, 102));
        PatientNameField.setText("Name...");
        PatientNameField.setToolTipText("");
        PatientNameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PatientNameFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                PatientNameFieldFocusLost(evt);
            }
        });

        PatientWeightField.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        PatientWeightField.setForeground(new java.awt.Color(102, 102, 102));
        PatientWeightField.setText("Weight...");
        PatientWeightField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PatientWeightFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                PatientWeightFieldFocusLost(evt);
            }
        });

        PatientHeightField.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        PatientHeightField.setForeground(new java.awt.Color(102, 102, 102));
        PatientHeightField.setText("Height...");
        PatientHeightField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PatientHeightFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                PatientHeightFieldFocusLost(evt);
            }
        });

        PatientAgeField.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        PatientAgeField.setForeground(new java.awt.Color(102, 102, 102));
        PatientAgeField.setText("Age...");
        PatientAgeField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PatientAgeFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                PatientAgeFieldFocusLost(evt);
            }
        });

        PatientNumberField.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        PatientNumberField.setForeground(new java.awt.Color(102, 102, 102));
        PatientNumberField.setText("Number...");
        PatientNumberField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PatientNumberFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                PatientNumberFieldFocusLost(evt);
            }
        });

        PatientAddressField.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        PatientAddressField.setForeground(new java.awt.Color(102, 102, 102));
        PatientAddressField.setText("Address...");
        PatientAddressField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PatientAddressFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                PatientAddressFieldFocusLost(evt);
            }
        });

        Hombre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/Slobish/Images/Hombre0.png"))); // NOI18N
        Hombre.setBorder(null);
        Hombre.setBorderPainted(false);
        Hombre.setContentAreaFilled(false);
        Hombre.setFocusPainted(false);
        Hombre.setFocusable(false);
        Hombre.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Hombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HombreActionPerformed(evt);
            }
        });

        Mujer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/Slobish/Images/Mujer0.png"))); // NOI18N
        Mujer.setBorder(null);
        Mujer.setBorderPainted(false);
        Mujer.setContentAreaFilled(false);
        Mujer.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Mujer.setFocusPainted(false);
        Mujer.setFocusable(false);
        Mujer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Mujer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MujerActionPerformed(evt);
            }
        });

        LOGO.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/Slobish/Images/LogoEirCareSmall.png"))); // NOI18N
        LOGO.setText("jLabel1");

        PatientDNIField.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        PatientDNIField.setForeground(new java.awt.Color(102, 102, 102));
        PatientDNIField.setText("DNI...");
        PatientDNIField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PatientDNIFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                PatientDNIFieldFocusLost(evt);
            }
        });

        PatientMedicalInsurance.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        PatientMedicalInsurance.setForeground(new java.awt.Color(102, 102, 102));
        PatientMedicalInsurance.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Swiss Medical", "OSDE", " " }));

        Next.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/Slobish/Images/Flecha.png"))); // NOI18N
        Next.setBorder(null);
        Next.setBorderPainted(false);
        Next.setContentAreaFilled(false);
        Next.setFocusPainted(false);
        Next.setFocusable(false);
        Next.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextActionPerformed(evt);
            }
        });

        PatientBloodtype.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        PatientBloodtype.setForeground(new java.awt.Color(102, 102, 102));
        PatientBloodtype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "O-", "O+", "A-", "A+", "B-", "B+", "AB-", "AB+" }));
        PatientBloodtype.setToolTipText("");

        NameX.setForeground(new java.awt.Color(255, 0, 0));
        NameX.setText("X");

        HeightX.setForeground(new java.awt.Color(255, 0, 0));
        HeightX.setText("X");

        DNIX.setForeground(new java.awt.Color(255, 0, 0));
        DNIX.setText("X");

        AddressX.setForeground(new java.awt.Color(255, 0, 0));
        AddressX.setText("X");

        LastnameX.setForeground(new java.awt.Color(255, 0, 0));
        LastnameX.setText("X");

        WeightX.setForeground(new java.awt.Color(255, 0, 0));
        WeightX.setText("X");

        NumberX.setForeground(new java.awt.Color(255, 0, 0));
        NumberX.setText("X");

        AgeX.setForeground(new java.awt.Color(255, 0, 0));
        AgeX.setText("X");

        AssignedWristbandKey.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        AssignedWristbandKey.setForeground(new java.awt.Color(102, 102, 102));
        AssignedWristbandKey.setText("Assigned Wristband...");
        AssignedWristbandKey.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                AssignedWristbandKeyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                AssignedWristbandKeyFocusLost(evt);
            }
        });

        AssignedWristbandX.setForeground(new java.awt.Color(255, 0, 0));
        AssignedWristbandX.setText("X");

        PatientEmailField.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        PatientEmailField.setForeground(new java.awt.Color(102, 102, 102));
        PatientEmailField.setText("Email...");
        PatientEmailField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PatientEmailFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                PatientEmailFieldFocusLost(evt);
            }
        });

        EmailX.setForeground(new java.awt.Color(255, 0, 0));
        EmailX.setText("X");

        Uploading.setText("Uploading...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Uploading)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Next, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(PatientNameField)
                                    .addComponent(PatientHeightField)
                                    .addComponent(PatientAddressField)
                                    .addComponent(PatientMedicalInsurance, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(NameX)
                                    .addComponent(HeightX)
                                    .addComponent(AddressX))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(PatientWeightField, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(WeightX))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(PatientNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(NumberX))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(PatientLastField, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(LastnameX))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(AssignedWristbandKey, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(AssignedWristbandX)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(PatientAgeField)
                                            .addComponent(PatientBloodtype, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(PatientDNIField, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(PatientEmailField)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(AgeX)
                                    .addComponent(DNIX)
                                    .addComponent(EmailX)))
                            .addComponent(LOGO, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(Hombre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Mujer, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(49, 49, 49))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LOGO)
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PatientNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PatientLastField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PatientAgeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NameX, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LastnameX, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AgeX, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PatientHeightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PatientWeightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PatientBloodtype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(HeightX, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(WeightX, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PatientNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PatientMedicalInsurance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PatientDNIField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DNIX, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NumberX, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PatientAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AddressX, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AssignedWristbandKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AssignedWristbandX, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PatientEmailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EmailX, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 38, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Mujer, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Hombre, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(Next))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(Uploading, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void HombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HombreActionPerformed
        ImageSelected = new ImageIcon(getClass().getResource("Images/Mujer0.png"));
        Mujer.setIcon(ImageSelected);
        ImageSelected = new ImageIcon(getClass().getResource("Images/Hombre1.png"));
        Hombre.setIcon(ImageSelected);
        SexSelected="Hombre";        
    }//GEN-LAST:event_HombreActionPerformed

    private void MujerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MujerActionPerformed
        ImageSelected = new ImageIcon(getClass().getResource("Images/Mujer1.png"));
        Mujer.setIcon(ImageSelected);
        ImageSelected = new ImageIcon(getClass().getResource("Images/Hombre0.png"));
        Hombre.setIcon(ImageSelected);
        SexSelected="Mujer";        
    }//GEN-LAST:event_MujerActionPerformed

    private void PatientNameFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PatientNameFieldFocusLost
          if (PatientNameField.getText().equals(""))
        {             
            PatientNameField.setFont(new Font("Tahoma",2,11));
            PatientNameField.setForeground(nativeColor);
            PatientNameField.setText("Name...");
        }
    }//GEN-LAST:event_PatientNameFieldFocusLost

    private void PatientNameFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PatientNameFieldFocusGained
        if (PatientNameField.getText().equals("Name..."))
        {             
            PatientNameField.setFont(new Font("Tahoma",1,11));
            PatientNameField.setForeground(Color.black);
            PatientNameField.setText("");
        }// TODO add your handling code here:
    }//GEN-LAST:event_PatientNameFieldFocusGained

    private void PatientLastFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PatientLastFieldFocusGained
       if (PatientLastField.getText().equals("Lastname..."))
        {             
            PatientLastField.setFont(new Font("Tahoma",1,11));
            PatientLastField.setForeground(Color.black);
            PatientLastField.setText("");
        } // TODO add your handling code here:
    }//GEN-LAST:event_PatientLastFieldFocusGained

    private void PatientLastFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PatientLastFieldFocusLost
         if (PatientLastField.getText().equals(""))
        {             
            PatientLastField.setFont(new Font("Tahoma",2,11));
            PatientLastField.setForeground(nativeColor);
            PatientLastField.setText("Lastname...");
        }// TODO add your handling code here:
    }//GEN-LAST:event_PatientLastFieldFocusLost

    private void PatientAgeFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PatientAgeFieldFocusGained
        if (PatientAgeField.getText().equals("Age..."))
        {             
            PatientAgeField.setFont(new Font("Tahoma",1,11));
            PatientAgeField.setForeground(Color.black);
            PatientAgeField.setText("");
        }          // TODO add your handling code here:
    }//GEN-LAST:event_PatientAgeFieldFocusGained

    private void PatientAgeFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PatientAgeFieldFocusLost
         if (PatientAgeField.getText().equals(""))
        {             
            PatientAgeField.setFont(new Font("Tahoma",2,11));
            PatientAgeField.setForeground(nativeColor);
            PatientAgeField.setText("Age...");
        }// TODO add your handling code here:
    }//GEN-LAST:event_PatientAgeFieldFocusLost

    private void PatientHeightFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PatientHeightFieldFocusGained
          if (PatientHeightField.getText().equals("Height..."))
        {             
            PatientHeightField.setFont(new Font("Tahoma",1,11));
            PatientHeightField.setForeground(Color.black);
            PatientHeightField.setText("");
        } // TODO add your handling code here:
    }//GEN-LAST:event_PatientHeightFieldFocusGained

    private void PatientHeightFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PatientHeightFieldFocusLost
         if (PatientHeightField.getText().equals(""))
        {             
            PatientHeightField.setFont(new Font("Tahoma",2,11));
            PatientHeightField.setForeground(nativeColor);
            PatientHeightField.setText("Height...");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_PatientHeightFieldFocusLost

    private void PatientWeightFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PatientWeightFieldFocusGained
      if (PatientWeightField.getText().equals("Weight..."))
        {             
            PatientWeightField.setFont(new Font("Tahoma",1,11));
            PatientWeightField.setForeground(Color.black);
            PatientWeightField.setText("");
        }   // TODO add your handling code here:
    }//GEN-LAST:event_PatientWeightFieldFocusGained

    private void PatientWeightFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PatientWeightFieldFocusLost
        if (PatientWeightField.getText().equals(""))
        {             
            PatientWeightField.setFont(new Font("Tahoma",2,11));
            PatientWeightField.setForeground(nativeColor);
            PatientWeightField.setText("Weight...");
        }  // TODO add your handling code here:
    }//GEN-LAST:event_PatientWeightFieldFocusLost

    private void PatientNumberFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PatientNumberFieldFocusGained
       if (PatientNumberField.getText().equals("Number..."))
        {             
            PatientNumberField.setFont(new Font("Tahoma",1,11));
            PatientNumberField.setForeground(Color.black);
            PatientNumberField.setText("");
        }  // TODO add your handling code here:
    }//GEN-LAST:event_PatientNumberFieldFocusGained

    private void PatientNumberFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PatientNumberFieldFocusLost
          if (PatientNumberField.getText().equals(""))
        {             
            PatientNumberField.setFont(new Font("Tahoma",2,11));
            PatientNumberField.setForeground(nativeColor);
            PatientNumberField.setText("Medical insuranse number...");
        }// TODO add your handling code here:
    }//GEN-LAST:event_PatientNumberFieldFocusLost

    private void PatientAddressFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PatientAddressFieldFocusGained
        if (PatientAddressField.getText().equals("Address..."))
        {             
            PatientAddressField.setFont(new Font("Tahoma",1,11));
            PatientAddressField.setForeground(Color.black);
            PatientAddressField.setText("");
        }// TODO add your handling code here:
    }//GEN-LAST:event_PatientAddressFieldFocusGained

    private void PatientDNIFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PatientDNIFieldFocusGained
        if (PatientDNIField.getText().equals("DNI..."))
        {             
            PatientDNIField.setFont(new Font("Tahoma",1,11));
            PatientDNIField.setForeground(Color.black);
            PatientDNIField.setText("");
        } // TODO add your handling code here:
    }//GEN-LAST:event_PatientDNIFieldFocusGained

    private void PatientAddressFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PatientAddressFieldFocusLost
          if (PatientAddressField.getText().equals(""))
        {             
            PatientAddressField.setFont(new Font("Tahoma",2,11));
            PatientAddressField.setForeground(nativeColor);
            PatientAddressField.setText("Address...");
        }
    }//GEN-LAST:event_PatientAddressFieldFocusLost

    private void PatientDNIFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PatientDNIFieldFocusLost
          if (PatientDNIField.getText().equals(""))
        {             
            PatientDNIField.setFont(new Font("Tahoma",2,11));
            PatientDNIField.setForeground(nativeColor);
            PatientDNIField.setText("DNI...");
        }  // TODO add your handling code here:
    }//GEN-LAST:event_PatientDNIFieldFocusLost

    private void NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextActionPerformed
        Information.clear();
        allFilled=true;
        if(PatientDNIField.getText().isEmpty() || PatientDNIField.getText().equals("DNI..."))
        {
            allFilled=false;
            DNIX.setVisible(true);
        }// TODO add your handling code here:
        else
        {
            if(PatientDNIField.getText().length()==8)
            {
            Information.put("DNI",(PatientDNIField.getText()));           
            DNIX.setVisible(false);
            }
            else
            {                
            allFilled=false;
            DNIX.setVisible(true);            
            }
        }
        if (PatientNameField.getText().isEmpty() || PatientNameField.getText().equals("Name..."))
        {
            allFilled=false;
            NameX.setVisible(true);
        }
        else
        {
            Information.put("Name",(PatientNameField.getText()));
            NameX.setVisible(false);
        }
        if (PatientLastField.getText().isEmpty() || PatientLastField.getText().equals("Lastname..."))
        {
            allFilled=false;
            LastnameX.setVisible(true);
        }
        else
        {
            Information.put("Lastname",(PatientLastField.getText()));
            LastnameX.setVisible(false);
        }
        if (PatientHeightField.getText().isEmpty() || PatientHeightField.getText().equals("Height..."))
        {
            allFilled=false;
            HeightX.setVisible(true);
        }
        else
        {
            Information.put("Height",(PatientHeightField.getText()));
            HeightX.setVisible(false);
        }
        if (PatientWeightField.getText().isEmpty() || PatientWeightField.getText().equals("Weight..."))
        {
            allFilled=false;
            WeightX.setVisible(true);
        }
        else
        {
            Information.put("Weight",(PatientWeightField.getText()));
            WeightX.setVisible(false);
        }
        if (PatientAgeField.getText().isEmpty() || PatientAgeField.getText().equals("Age..."))
        {
            allFilled=false;
            AgeX.setVisible(true);
        }
        else
        {
            Information.put("Age",(PatientAgeField.getText()));
            AgeX.setVisible(false);
        }
        if(PatientNumberField.getText().isEmpty() || PatientNumberField.getText().equals("Number..."))
        {
            allFilled=false;
            NumberX.setVisible(true);
        }
        else
        {
            Information.put("Number",(PatientNumberField.getText()));
            NumberX.setVisible(false);
        }
        if(PatientAddressField.getText().isEmpty() || PatientAddressField.getText().equals("Address..."))
        {
            allFilled=false;
            AddressX.setVisible(true);
        }
        else
        {
            Information.put("Address",(PatientAddressField.getText()));
            AddressX.setVisible(false);
        }
        if(AssignedWristbandKey.getText().isEmpty() || AssignedWristbandKey.getText().equals("Assigned Wristband..."))
        {
            allFilled=false;
            AssignedWristbandX.setVisible(true);
        }
        else
        {
            AssignedWristbandX.setVisible(false);
            Information.put("AssignedWristband",(AssignedWristbandKey.getText()));
        }
        if(PatientEmailField.getText().isEmpty() || PatientEmailField.getText().equals("Email..."))
        {
            allFilled=false;
            EmailX.setVisible(true);
        }
        else
        {
            EmailX.setVisible(false);
            Information.put("Email",PatientEmailField.getText());
            emailTo=PatientEmailField.getText();
        }
        if(SexSelected.equals("none"))
        {
            allFilled=false;
        }
        else
        {
            Information.put("Sex",SexSelected);
        }
        if(allFilled)
        {
            Information.put("Bloodtype",(PatientBloodtype.getSelectedItem().toString()));
            Information.put("MedicalInsurance",(PatientMedicalInsurance.getSelectedItem().toString()));
            
            if(checkExistence(Information.get("DNI").toString(),Information.get("AssignedWristband").toString()))
            {
                Uploading.setVisible(true);
                try
                {
                   
                   dataUploader(Information,emailTo);
                }
                catch(Exception e)
                {
                    System.out.println(e);
                }
                try 
                {
                    Uploading.setText("Sending e-mail...");
                    SendEmail();
                    Uploading.setText("Registration succesful");
                }
                catch (MessagingException ex) 
                {
                    Logger.getLogger(SetNewWristband1.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
                       
        }       
    }//GEN-LAST:event_NextActionPerformed

public void dataUploader(HashMap Information,String email)
{
    String DNI = Information.get("DNI").toString();
    String Nombre = Information.get("Name").toString();
    String Apellido = Information.get("Lastname").toString();
    String Edad= Information.get("Age").toString();
    String Altura = Information.get("Height").toString();
    String Peso = Information.get("Weight").toString();
    String Direccion = Information.get("Address").toString();
    String IDmed = GlobalSession.username;
    String GrupoS= Information.get("Bloodtype").toString();
    String Obra = Information.get("MedicalInsurance").toString();
    String Number= Information.get("Number").toString();
    
    
    
    String query1="INSERT INTO `pacientes`"
            + "(`DNI`, `Nombre`, `Apellido`, `Edad`, `Altura`, `Peso`, `Direccion`"
            + ", `IDmed`, `GrupoSanguineo`, `ObraSocial`, `NroObraSocial`, `Email`)"
            + " VALUES ('"+DNI+"','"+Nombre+"','"+Apellido+"','"+Edad+"','"+Altura+""
            + "','"+Peso+"','"+Direccion+"','"+IDmed+"','"+GrupoS+"','"+Obra+"','"+Number+"','"+email+"')";
    SQL.ejecutarSQL(query1);
    query1="INSERT INTO `pulseras`(`Patente`, `Paciente`, `FechaInicio`, `FechaFinal`) "
            + "VALUES ('"+Information.get("AssignedWristband")+"','"+DNI+"','"+getDate()+"','"+""+"')";
    SQL.ejecutarSQL(query1);
}
public boolean checkExistence(String DNI,String PATENT)
{
    ResultSet resultado;
    String query1="SELECT pacientes.DNI from pacientes where DNI like '"+ DNI+"'";
    String query2="SELECT pulseras.Patente from pulseras where Patente"
            + " like '"+PATENT+"' and FechaFinal like '"+""+"'" ;
    resultado=SQL.ejecutarSQLSelect(query1);
    try 
    {
        if(resultado.next()) 
        {
            JOptionPane.showMessageDialog(this, "Ya existe un paciente con ese DNI!");
            return false;            
        }
    } 
    catch (SQLException ex) 
        {
            Logger.getLogger(DoctorLogin.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }   
    resultado=SQL.ejecutarSQLSelect(query2);
    try 
    {
        if(resultado.next())
        {
            JOptionPane.showMessageDialog(this, "Esa patente ya esta en uso!");
            return false;
            
        }
    } 
    catch (SQLException ex) 
        {
            Logger.getLogger(DoctorLogin.class.getName()).log(Level.SEVERE, null, ex);
            
            return false;
        }
        return true;
}
    
    
private class SMTPAuthenticator extends Authenticator
    {
        @Override
        public PasswordAuthentication getPasswordAuthentication()
        {
            return new PasswordAuthentication(emailFrom,passFrom);
        }
    }
public void SendEmail() throws MessagingException
{       
        Properties props = new Properties();          
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");
        props.put("mail.smtp.ssl.trust", "smtp.gmail.com");
        props.put("mail.smtp.starttls.enable", "true");
        
        SMTPAuthenticator auth = new SMTPAuthenticator();           
        
        session = Session.getInstance(props,auth);      
        session.setDebug(true);
        
        try {

            generatedPassword=generatePassword();
            generatedUser=generateUser();
            message = new MimeMessage(session);
            message.setFrom(new InternetAddress(emailFrom));
            message.setRecipients(Message.RecipientType.TO,
                    InternetAddress.parse(emailTo));
            message.setSubject("Register succeed");
            message.setText("Congratulations! You are now being cared by EirCare"
                    + "\nWe have provided you an account to let you and your parents care you too! "
                    + "\nthis is all the information we have"
                    + "\nDNI:"+Information.get("DNI")+" Name:"+Information.get("Name")
                    + "\nLastname:"+Information.get("Lastname")+" Age:"+Information.get("Age")
                    + "\nHeight:"+Information.get("Height")+" Weight:"+Information.get("Weight")
                    + "\nBloodtype:"+Information.get("Bloodtype")+" Address:"+Information.get("Address")
                    + "\nMedical Insurance:"+Information.get("MedicalInsurance") +"Insurance Number:"+Information.get("Number")
                    + "\nYour wristband should be named:"+Information.get("AssignedWristband")
                    + "\nIf it's not, please contact"
                    + "\n the doctor who have been assigned to you to solve the problem"
                    + "\n This is your online following account:"        
                    + "\nUser:"+generatedUser+" and Password:"+generatedPassword
                    + "\nThank you for choose EirCare...");
            
            Transport transport = session.getTransport("smtp");
                       
            transport.connect(emailHost,587,emailFrom ,passFrom);
            
            transport.send(message);
            transport.close();
            
            try
            {
                SQL.ejecutarSQL("INSERT INTO `parientes`(`Usuario`, `Contraseña`, `DNI`) VALUES ('"+generatedUser+"','"+generatedPassword+"','"+Information.get("DNI")+"')");
                JOptionPane.showMessageDialog(this, "A new patient has been added"
                    + " \n this is his following account \n : Usuario:"+generatedUser+"\n Contraseña:"
                            + ""+generatedPassword);

            }
            catch(HeadlessException e)
            {
                System.out.println(e);
            }
                        

        } catch (MessagingException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error");
            Uploading.setText("Error...");
           
        }
                 
}


public String generatePassword()
{
   Random randGen = new Random();
    String pass ="";

    for (int i = 0; i < 8; i++)
    {
        if (randGen.nextInt(2) == 0)
        {
            pass=pass+((char)(randGen.nextInt( 'Z' - 'A' + 1  ) + 65));
        }
        else
        {
            pass=pass+((char)(randGen.nextInt( '9' - '0' + 1 ) + 48));
        }
    }
    //System.out.println(randGen.nextInt( ('Z' - 'A' + 1 ) + 1));
    return pass;
}



        
public String generateUser()
{
  String user=Information.get("Lastname").toString()+(Information.get("DNI").toString().substring(5));   
  return user;   
}
    private void AssignedWristbandKeyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_AssignedWristbandKeyFocusGained
        if (AssignedWristbandKey.getText().equals("Assigned Wristband..."))
        {             
            AssignedWristbandKey.setFont(new Font("Tahoma",1,11));
            AssignedWristbandKey.setForeground(Color.black);
            AssignedWristbandKey.setText("");
        }  // TODO add your handling code here:
    }//GEN-LAST:event_AssignedWristbandKeyFocusGained

    private void AssignedWristbandKeyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_AssignedWristbandKeyFocusLost
        if (AssignedWristbandKey.getText().equals(""))
        {             
            AssignedWristbandKey.setFont(new Font("Tahoma",2,11));
            AssignedWristbandKey.setForeground(nativeColor);
            AssignedWristbandKey.setText("Assigned Wristband...");
        }// TODO add your handling code here:
    }//GEN-LAST:event_AssignedWristbandKeyFocusLost

    private void PatientEmailFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PatientEmailFieldFocusGained
         if (PatientEmailField.getText().equals("Email..."))
        {             
            PatientEmailField.setFont(new Font("Tahoma",1,11));
            PatientEmailField.setForeground(Color.black);
            PatientEmailField.setText("");
        }       // TODO add your handling code here:
    }//GEN-LAST:event_PatientEmailFieldFocusGained

    private void PatientEmailFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PatientEmailFieldFocusLost
       if (PatientEmailField.getText().equals(""))
        {             
            PatientEmailField.setFont(new Font("Tahoma",2,11));
            PatientEmailField.setForeground(nativeColor);
            PatientEmailField.setText("Email...");
        }
    }//GEN-LAST:event_PatientEmailFieldFocusLost
              
public String getDate()
{
    Calendar c = Calendar.getInstance();
    String dia = Integer.toString(c.get(Calendar.DATE));
    String mes = Integer.toString(c.get(Calendar.MONTH));
    String año = Integer.toString(c.get(Calendar.YEAR));
    String Date=dia+"/"+mes+"/"+año;
    return Date;
}
                                             

                            
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SetNewWristband1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SetNewWristband1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SetNewWristband1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SetNewWristband1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new SetNewWristband1().setVisible(true);
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AddressX;
    private javax.swing.JLabel AgeX;
    private javax.swing.JTextField AssignedWristbandKey;
    private javax.swing.JLabel AssignedWristbandX;
    private javax.swing.JLabel DNIX;
    private javax.swing.JLabel EmailX;
    private javax.swing.JLabel HeightX;
    private javax.swing.JButton Hombre;
    private javax.swing.JLabel LOGO;
    private javax.swing.JLabel LastnameX;
    private javax.swing.JButton Mujer;
    private javax.swing.JLabel NameX;
    private javax.swing.JButton Next;
    private javax.swing.JLabel NumberX;
    private javax.swing.JTextField PatientAddressField;
    private javax.swing.JTextField PatientAgeField;
    private javax.swing.JComboBox<String> PatientBloodtype;
    private javax.swing.JTextField PatientDNIField;
    private javax.swing.JTextField PatientEmailField;
    private javax.swing.JTextField PatientHeightField;
    private javax.swing.JTextField PatientLastField;
    private javax.swing.JComboBox<String> PatientMedicalInsurance;
    private javax.swing.JTextField PatientNameField;
    private javax.swing.JTextField PatientNumberField;
    private javax.swing.JTextField PatientWeightField;
    private javax.swing.JLabel Uploading;
    private javax.swing.JLabel WeightX;
    // End of variables declaration//GEN-END:variables
}
